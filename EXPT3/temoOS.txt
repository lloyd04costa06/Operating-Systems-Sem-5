#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#define MAX 10
using namespace std;


int N,TOTbt=0;

typedef struct PROCESSES{
    int index;
    int BT;
    int AT;
    int PRIO;
    int CountBT;
};

typedef struct ARRANGE{
    vector<PROCESSES> P;
};
ARRANGE ALIST[10];

void processInput(PROCESSES Table[])
{
    cout<<"ENTER NUMBER OF ELEMENTS: ";
    cin>>N;
    cout<<"ENTER THE PROCESS DETAILS"<<endl;
    for(int i=0;i<N;i++)
    {
        cout<<"P"<<i+1<<": \n";
        Table[i].index=i;
        cout<<"ENTER BURST TIME: ";
        cin>>Table[i].BT; TOTbt+=Table[i].BT;

         cout<<"ENTER ARRIVAL TIME: ";
        cin>>Table[i].AT;

        cout<<"ENTER PRIORITY: ";
        cin>>Table[i].PRIO;
        cout<<endl;

        Table[i].CountBT=0;
    }

}

bool CRITERIA(PROCESSES A,PROCESSES B)
{
    return(A.PRIO<B.PRIO);
}

bool CRITERIA2(PROCESSES A,PROCESSES B)
{
    return(A.PRIO>B.PRIO);
}
void processArrange(PROCESSES Table[])
{
    for(int i=0;i<N;i++)
    {
        ALIST[Table[i].AT].P.push_back(Table[i]);
    }

    for(int i=0;i<N;i++)
    {
          sort( ALIST[i].P.begin(), ALIST[i].P.end(),CRITERIA);
    }

    vector<PROCESSES>::iterator IT;
        cout<<TOTbt<<endl<<endl;
    for(int i=0;i<TOTbt;i++)
    {
        cout<<i<<"-->";
        for(IT=ALIST[i].P.begin();IT!=ALIST[i].P.end();++IT)
        {
            cout<<"P"<<(*IT).index<<", ";
        }
        cout<<endl;

    }


}

void PrintGANTT(PROCESSES Table,int i)
{
        cout<<"|"<<i<<"|";
        cout<<"---"<<"P"<<Table.index<<"---";
    // cout<<"|"<<sum<<"|"<<endl;
}

void PRIORITY_SCHEDULING(PROCESSES Table[])
{
    vector<PROCESSES>readyQ;
    PROCESSES CURRENT,PREVIOUS,MAXP;
    vector<PROCESSES>::iterator QT;

    for(int i=0;i<TOTbt;i++)
    {
            for(QT=ALIST[i].P.begin();QT!=ALIST[i].P.end())
            {
                readyQ.push_back(QT)
            }
            

            if(MAXP.CountBT < MAXP.BT){
                PrintGANTT(MAXP,i)
                MAXP.BT--;
            }

    }

}

int main()
{
    PROCESSES Table[MAX];
    processInput(Table);
    processArrange(Table);
    // PRIORITY_SCHEDULING(Table);
  
}

